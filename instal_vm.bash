export project_name='prj_1' sudo apt-get -y install openssh-serversudo chmod 777 /etc/apt/sources.listwget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -wget -q -O - https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'sudo sh -c 'echo deb http://apt.kubernetes.io/ kubernetes-xenial main > /etc/apt/sources.list.d/kubernetes.list'sudo chmod 644 /etc/apt/sources.listsudo apt-get -y updatesudo apt-get install -y kubelet kubeadm kubectl kubernetes-cni#sudo apt-get -y install jenkinssudo apt-get -y install gitmkdir -p $project_name/ping  mkdir -p $project_name/revel  cd $project_namesudo apt-get -y install unziprm master.zip*wget . https://github.com/joToui/pingponggo/archive/master.zipecho `pwd`unzip -o master.zipcp pingponggo-master/requirements.txt ping/.cp pingponggo-master/ping.py ping/.cp pingponggo-master/restserver.go  revel/.cd ping sudo apt install -y docker.ioecho "building Dockerfile .... "cat >Dockerfile << DOCFL FROM ubuntu:14.04# Update OSRUN sed -i 's/# \(.*multiverse$\)/\1/g' /etc/apt/sources.listRUN apt-get -y updateRUN apt-get -y upgrade# Install PythonRUN apt-get -y install python-pipRUN apt-get -y install python-dev RUN apt-get -y install python-pycurl#COPY requirements.txt .COPY requirements.txt /tmp/# Install uwsgi Python web server#RUN pip install uwsgi# Install app requirements# Set the default directory for our environmentRUN mkdir -p /jinny/$project_name/pingENV HOME /jinny/$project_name/pingWORKDIR /jinny/$project_name/ping ENV FLASK_APP /jinny/$project_name/ping/ping.pyCOPY ping.py /jinny/$project_name/ping/.#COPY test1 $HOME/test1RUN echo `pwd `#RUN echo `ls /webapp/requirements.txt`RUN pip install -r /tmp/requirements.txt# Create app directory#ENTRYPOINT ["python"]#RUN ["young_30.py"]RUN echo \`pwd \`RUN echo \`ls \`RUN echo \`which flask \`ENTRYPOINT [ "python", "/jinny/$project_name/ping/ping.py", "-p", "1948", "-h", "0.0.0.0" ]# Expose port 1948 for uwsgiEXPOSE 1948DOCFLecho "ping out_of Dockerfile  "echo "building image .... "sudo docker build . -t flask_imageecho "building image .... "echo "running  image .... "sudo nohup bash -c "docker run flask_image 2>&1 &"echo " image is up .... "echo "so new image is needed for the go restserver "################################################################cd ..mkdir -p revelcd revelecho "building Dockerfile .... "cat >Dockerfile << DOCFLG FROM ubuntu:14.04# Update OSRUN sed -i 's/# \(.*multiverse$\)/\1/g' /etc/apt/sources.listRUN apt-get -y updateRUN apt-get -y upgrade# Install PythonRUN sudo apt-get -y install golang-go#COPY requirements.txt .# Set the default directory for our environmentRUN mkdir -p /jinny/$project_name/revelENV HOME /jinny/$project_name/revelWORKDIR /jinny/$project_name/revelCOPY restserver.go /jinny/$project_name/revel/.#COPY test1 $HOME/test1RUN echo `pwd `#RUN echo `ls /webapp/requirements.txt`#RUN ["young_30.py"]ENTRYPOINT [ "go", "run", "restserver.go" ]# Expose port 1949 for uwsgiEXPOSE 1949DOCFLGecho "ping out_of Dockerfile  "echo "building image .... "sudo docker build . -t go_revelecho "building image .... "echo "running  image .... "sudo nohup bash -c "docker run go_revel 2>&1 &"echo " image is up .... "echo "so new image is needed for the go restserver "
